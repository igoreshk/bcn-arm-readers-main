import groovy.json.JsonBuilder

plugins {
    id 'beacons.service-conventions'
    id 'io.github.rockerhieu.versionberg'
}

def swaggerVersion = '2.9.2'
def mapStructVersion = '1.3.1.Final'

dependencies {
    implementation('org.springframework.cloud:spring-cloud-starter-config')
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    implementation('org.springframework.cloud:spring-cloud-starter-openfeign')
    implementation('org.springframework.boot:spring-boot-starter-data-mongodb')
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }

    compile "javax.servlet:javax.servlet-api:4.0.0"
    compile "org.mapstruct:mapstruct:${mapStructVersion}"
    compile "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
    implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"
    implementation "io.springfox:springfox-bean-validators:${swaggerVersion}"

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
}

// Create build.json
def commitShaPb = new ProcessBuilder("git", "rev-parse", "--short", "HEAD")
def branchPb = new ProcessBuilder("git", "rev-parse", "--abbrev-ref", "HEAD")
def file = new File(rootDir.getAbsolutePath() + "/${project.name}/src/main/resources/build.json")
def parent = file.getParentFile()
def json = new JsonBuilder()

Map<String, String> data = [
        app   : project.name,
        date  : new Date().format("MM/dd/yyyy"),
        ver   : "2.1.${project.versionberg.build}",
        hash  : commitShaPb.start().text.trim(),
        branch: branchPb.start().text.trim()
]

if (!parent.exists() && !parent.mkdirs()) {
    throw new IllegalStateException("Couldn't create dir: " + parent)
} else {
    file.createNewFile()
}

json build: data
file.write json.toPrettyString()
